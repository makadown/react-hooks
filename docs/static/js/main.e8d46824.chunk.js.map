{"version":3,"sources":["components/08-use-reducer/todoReducer.js","components/08-use-reducer/TodoListItem.jsx","components/08-use-reducer/TodoList.jsx","components/08-use-reducer/TodoAdd.jsx","hooks/useForm.js","components/08-use-reducer/TodoApp.js","reportWebVitals.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","memo","props","console","log","index","handleDelete","handleToggle","className","onClick","desc","disabled","TodoList","todos","TodoAdd","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","onSubmit","e","preventDefault","trim","length","newTodo","Date","getTime","placeholder","autoComplete","onChange","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8d46824.chunk.js","sourcesContent":["\r\nexport const todoReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n       case 'add':\r\n           return [...state, action.payload];\r\n        case 'delete':\r\n            return state.filter(todo => todo.id !== action.payload );\r\n        case 'toggle':\r\n            return state.map( todo => \r\n                ( todo.id === action.payload ) ? \r\n                    { ...todo, done: !todo.done } :\r\n                    todo\r\n            );\r\n        case 'toggle-legacy':\r\n                return state.map( todo => {\r\n                    if ( todo.id === action.payload ) {\r\n                        return {\r\n                            ...todo,\r\n                            done: !todo.done\r\n                        };\r\n                    } else { return todo; }\r\n                });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { memo } from 'react';\r\n\r\nexport const TodoListItem = memo((props) => {\r\n  console.log('props de todolistitem', props);\r\n  const { todo, index, handleDelete, handleToggle } = props;\r\n\r\n  return (\r\n    <li\r\n      key={todo.id}\r\n      className=\"list-group-item list-group-item-dark d-flex justify-content-between align-items-start\"\r\n    >\r\n      <div className=\"ms-2 me-auto\">\r\n        <div className=\"fw-bold\">\r\n          <p\r\n            className={`${todo.done && 'complete disabled'}`}\r\n            onClick={() => handleToggle(todo.id)}\r\n          >\r\n            {index + 1}.- {todo.desc}\r\n          </p>\r\n        </div>\r\n        {todo.done ? 'Finalizado' : 'Pendiente'}\r\n      </div>\r\n      <span>\r\n        <button disabled={!todo.done}\r\n          className=\"btn btn-danger\"\r\n          onClick={() => handleDelete(todo.id)}\r\n        >\r\n          Borrar\r\n        </button>\r\n      </span>\r\n    </li>\r\n  );\r\n});\r\n","import React, { memo } from 'react'\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\nexport const TodoList = memo((props) => {\r\n    const { todos, handleDelete, handleToggle } = props;\r\n\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            todos.map((todo, index) => (\r\n                                <TodoListItem todo={todo} \r\n                                        key={todo.id}\r\n                                        index={index} \r\n                                        handleDelete={handleDelete} \r\n                                        handleToggle={handleToggle}>\r\n\r\n                                </TodoListItem>\r\n                            ))\r\n                        }\r\n        </ul>\r\n    )\r\n}\r\n);","import React, { memo } from 'react';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\n/**\r\n * Este es un fragmento que captura un texto y manda generar\r\n * un nuevo Todo\r\n */\r\nexport const TodoAdd = memo((props) => {\r\n  const { handleAddTodo } = props;\r\n\r\n  const [{ description }, handleInputChange, reset] = useForm({\r\n    description: '',\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (description.trim().length <= 1) {\r\n      return;\r\n    }\r\n    const newTodo = {\r\n      id: new Date().getTime(),\r\n      desc: description,\r\n      done: false,\r\n    };\r\n    // invoco la referencia de la funcion para que en el papa se \r\n    // agregue el todo\r\n    handleAddTodo(newTodo);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4> Agregar Todo </h4>\r\n      <hr />\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"d-grid gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"description\"\r\n            className=\"form-control\"\r\n            placeholder=\"Aprender...\"\r\n            autoComplete=\"off\"\r\n            value={description}\r\n            onChange={handleInputChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-outline-warning mt-1\">\r\n            Agregar\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n});\r\n","import { useState } from 'react'\r\n\r\n/**\r\n * Hook auxiliar para manejo de valores de formularios\r\n * @param {*} initialState \r\n * @returns \r\n */\r\nexport const useForm = (initialState = {}) => {\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    };\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        // los [] ayudan para encontrar dinamicamente \r\n        // el campo del state a modificar\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n\r\n    return [values, handleInputChange, reset];\r\n}\r\n","import React, { memo, useEffect, useReducer } from 'react';\r\nimport './styles.css';\r\nimport { todoReducer } from './todoReducer';\r\nimport { TodoList } from './TodoList';\r\nimport { TodoAdd } from './TodoAdd';\r\n\r\nconst init = () => {\r\n    // Si no hay localstorage (null), regresa un arreglo vacío\r\n    return JSON.parse(localStorage.getItem('todos')) || [];\r\n};\r\n\r\nexport const TodoApp = memo(() => {\r\n    const [todos, dispatch] = useReducer(todoReducer, [], init);\r\n\r\n    // Este useEffect me ayudará a almacenar en localstore cada que se \r\n    // detecte un cambio en el arreglo de todos!\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos])\r\n\r\n    const handleDelete = (todoId) => {\r\n        console.log(todoId);\r\n        // crear la action para borrar\r\n        const action = {\r\n            type: 'delete',\r\n            payload: todoId\r\n        };\r\n        // dispatch\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleToggle = (todoId) => {\r\n        console.log(todoId);\r\n        // crear la action para borrar\r\n        const action = {\r\n            type: 'toggle',\r\n            payload: todoId\r\n        };\r\n        // dispatch\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleAddTodo = (newTodo) => {\r\n        dispatch({\r\n            type: 'add',\r\n            payload: newTodo\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Todo App ( {todos.length} )</h1>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-7\">\r\n                    {/* Crear componente TodoList requiriendo \r\n                        todos, handleDelete, handleToggle\r\n                    */}\r\n                    <TodoList todos={todos}\r\n                        handleDelete={handleDelete}\r\n                        handleToggle={handleToggle}>\r\n                    </TodoList>\r\n                </div>\r\n                <div className=\"col-5\">\r\n                    <TodoAdd handleAddTodo={handleAddTodo}></TodoAdd>\r\n                    <hr />\r\n                    {\r\n                        todos.length > 0 &&\r\n                        <small>Haz click en cada tarea para darla como hecha.</small>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TodoApp } from './components/08-use-reducer/TodoApp';\n// import { CallbackHook } from './components/06-memos/CallbackHook';\n// import { Padre } from './components/07-tarea-memo/Padre';\n// import { MemoHook } from './components/06-memos/MemoHook';\n// import { Memorize } from './components/06-memos/Memorize';\n// import { Layout } from './components/05-useLayoutEffect/Layout';\n// import { RealExampleRef } from './components/04-useRef/RealExampleRef';\n// import { FocusScreen } from './components/04-useRef/FocusScreen';\n// import { MultipleCustomHooks } from './components/03-examples/MultipleCustomHooks';\n// import { FormWithCustomHook } from './components/02-useEffect/FormWithCustomHook';\n// import { CounterWithCustomHook } from './components/01-useState/CounterWithCustomHook';\n// import { SimpleForm } from './components/02-useEffect/SimpleForm';\n// import HookApp from './HookApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <TodoApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}